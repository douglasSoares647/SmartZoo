package com.br.smartzoo.model.singleton;

import com.br.smartzoo.model.entity.Animal;
import com.br.smartzoo.model.entity.Food;
import com.br.smartzoo.model.entity.Cage;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * Created by adenilson on 18/04/16.
 */
public class Stock {

    public static Stock _INSTANCE;
    private HashMap<String,List<Food>> foods;

    private Stock() {
        this.foods = new HashMap<String,List<Food>>();
    }

    public static Stock getInstance() {
        if (_INSTANCE == null) {
            _INSTANCE = new Stock();
        }

        return _INSTANCE;
    }

    //Add foods to stock using their name as reference. As the food names are generated by FoodEnum, there will not
    // be any data inconsistence
    public void putFoods(List<Food> foods) {
        for(Food food : foods){
        	if(this.foods.get(food.getName())!=null && !this.foods.get(food.getName()).contains(food)){
        		this.foods.get(food.getName()).add(food);
        	}
        	else{
        		this.foods.put(food.getName(), new ArrayList<Food>());
        		this.foods.get(food.getName()).add(food);
        	}
        }
    }

	public void putFoods(HashMap<String,List<Food>> foods){
		for(Map.Entry<String,List<Food>> entry : foods.entrySet()){
			String foodName = entry.getKey();
			List<Food> foodsToAdd = entry.getValue();

			if(this.foods.get(foodName)==null){
				this.foods.put(foodName,new ArrayList<Food>());
			}

            this.foods.get(foodName).addAll(foodsToAdd);

		}
	}
    
    // Method to take food from stock. The method only return foods with valid expiration date
    public List<Food> takeFoods(String name, Cage cage){
    	List<Food> foodsToTake = new ArrayList<Food>();
    	List<Food> stockFoods = foods.get(name);
    	List<Food> expiratedFoods = new ArrayList<Food>();
    	
    	Double weightOfFood = new Double(0);
    	
    	for(Animal animal : cage.getAnimals()){
    		weightOfFood += animal.getWeight()/12;
    	}
    	
    	if(stockFoods!=null){
    		for(Food food : stockFoods){
    			 Calendar expirationDate = Calendar.getInstance();
                 expirationDate.setTime(food.getExpirationDate());

                 Calendar currentDate = Calendar.getInstance();
                 
                 if(currentDate.before(expirationDate)){
	    			while(weightOfFood >0){
	    			foodsToTake.add(food);
	    			weightOfFood -= food.getWeight();
	    			}
                }
                 else{
                	 expiratedFoods.add(food);
                 }
    		}
    	}
    	stockFoods.removeAll(foodsToTake);
    	stockFoods.removeAll(expiratedFoods);
    	return foodsToTake;
    }
    
    @Override
    public String toString(){
    	StringBuilder stock = new StringBuilder();
    	stock.append("---Foods---\n");
    	for(Map.Entry<String,List<Food>> entry : foods.entrySet()) {
    		  String key = entry.getKey();
    		  List<Food> value = entry.getValue();

    		  stock.append(key + " : " + value.size()+ "\n");
    		}
    

    	return stock.toString();
    }


	public Boolean isStockEmpty(){
        for(Map.Entry<String,List<Food>> entry : foods.entrySet()){
            String key = entry.getKey();
            List<Food> foods = entry.getValue();
            if(!foods.isEmpty()){
                return false;
            }
        }

        return true;
	}


    public List<Food> getFoods() {
        List<Food> allFoods = new ArrayList<>();

        for(Map.Entry<String,List<Food>> entry : foods.entrySet()){
            List<Food> foodsByName = entry.getValue();
            allFoods.addAll(foodsByName);
        }
        return allFoods;
    }
}